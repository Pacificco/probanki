@using System.Globalization
@using Bankiru.Models.Domain
@model Bankiru.Models.Domain.Orgs.VM_Org
@{
    ViewBag.Title = Model.Title;
    Layout = "~/Areas/Admin/Views/Shared/MasterAdmin.cshtml";
}
@section styles {
  @Styles.Render("~/Content/admin/orgs/css")
}
<div class="back-to-list">
    @Html.ActionLink("Вернуться к списку", "List")
</div>
@{
    var attr = new Dictionary<string, object>();
    attr.Add("Id", "form-edit-org");
    attr.Add("enctype", "multipart/form-data");
}
<div id="org-editor">
    @using (Html.BeginForm("Edit", "Orgs", FormMethod.Post, attr))
    {
        @Html.ValidationSummary(true)            
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.Alias)
        @Html.HiddenFor(model => model.Icon)
        <div class="editor-title">
            <div class="editor-field">
                @Html.EditorFor(model => model.IsActive) @Html.LabelFor(model => model.IsActive)
                @Html.ValidationMessageFor(model => model.IsActive)
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.Title)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Title)
                @Html.ValidationMessageFor(model => model.Title)
            </div>
            <div class="editor-field editor-field-alias">
                Псевдоним: <span>@Model.Alias</span>
            </div>
        </div>
        <div class="editor-lists">
            <div class="editor-label">
                @Html.LabelFor(model => model.CategoryId)
            </div>
            <div class="editor-field">
                @Html.Action("_getOrgCategoriesDropDownList", "Orgs", new { selectedId = Model.CategoryId, firstItem = EnumFirstDropDownItem.NotSelected,
                    id = "CategoryId" })
                @Html.ValidationMessageFor(model => model.CategoryId)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.ParentId)
            </div>
            <div class="editor-field">
                @Html.Action("_getOrgsDropDownList", "Orgs", new { selectedId = Model.ParentId, firstItem = EnumFirstDropDownItem.NotSelected,
                    id = "ParentId" })
                @Html.ValidationMessageFor(model => model.ParentId)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.RegionId)
            </div>
            <div class="editor-field">
                @Html.Action("_getRegionsDropDownList", "Orgs", new { selectedId = Model.RegionId, firstItem = EnumFirstDropDownItem.NotSelected,
                    id = "RegionId" })
                @Html.ValidationMessageFor(model => model.RegionId)
            </div>
        </div>
        <div class="editor-main">
            <div class="editor-label">
                @Html.LabelFor(model => model.Descriptions)
            </div>            
            <div class="editor-field">
                @Html.EditorFor(model => model.Descriptions)
                @Html.ValidationMessageFor(model => model.Descriptions)
            </div>            
            <div class="editor-label">
                @Html.LabelFor(model => model.Comment)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Comment)
                @Html.ValidationMessageFor(model => model.Comment)
            </div>
        </div>
        <div class="editor-images">
            <div class="editor-field editor-field-icon">
                @if (!String.IsNullOrEmpty(Model.Icon))
                {
                    <img alt="@Model.IconAlt" title="@Model.Title" src="@Model.Icon" />
                }
                else
                {
                    <span>Иконка не задана</span>
                }
            </div>
            <div class="editor-field">
                <input type="file" id="NewIcon" name="NewIcon" />
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.IconTitle)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.IconTitle)
                @Html.ValidationMessageFor(model => model.IconTitle)
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.IconAlt)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.IconAlt)
                @Html.ValidationMessageFor(model => model.IconAlt)
            </div>
        </div>
        <div class="editor-meta">
            <div class="editor-label">
                @Html.LabelFor(model => model.MetaTitle)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.MetaTitle)
                @Html.ValidationMessageFor(model => model.MetaTitle)
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.MetaKeywords)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.MetaKeywords)
                @Html.ValidationMessageFor(model => model.MetaKeywords)
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.MetaDescriptions)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.MetaDescriptions)
                @Html.ValidationMessageFor(model => model.MetaDescriptions)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.MetaNoFollow) @Html.LabelFor(model => model.MetaNoFollow)
                @Html.ValidationMessageFor(model => model.MetaNoFollow)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.MetaNoIndex) @Html.LabelFor(model => model.MetaNoIndex)
                @Html.ValidationMessageFor(model => model.MetaNoIndex)
            </div>
        </div>
        <div class="editor-date">
            <div class="editor-field editor-field-createdat">
                Дата создания: <strong>@Model.CreatedAt.ToShortDateString() @Model.CreatedAt.ToShortTimeString()</strong>
            </div>
            <div class="editor-field editor-field-updateat">
                Дата последнего изменения: <strong>@Model.UpdatedAt.ToShortDateString() @Model.UpdatedAt.ToShortTimeString()</strong>
            </div>
            @if ((DateTime?)Model.LastVisitedAt != null)
            {
                <div class="editor-field editor-field-lastvisitedat">
                    Дата последнего посещения: <strong>
                        @{((DateTime)Model.LastVisitedAt).ToString("dd MMMM yyyy hh:mm", CultureInfo.CreateSpecificCulture("ru-RU"));}
                        @{((DateTime)Model.LastVisitedAt).ToString("dd MMMM yyyy hh:mm", CultureInfo.CreateSpecificCulture("ru-RU"));}
                    </strong>
                </div>
            }
            <div class="editor-field editor-field-hits">
                Просмотров: <strong>@Model.Hits.ToString()</strong>
            </div>
        </div>    
        <div class="editor-field">
            <input type="submit" value="Сохранить" />
        </div>
    }
</div>
@section scripts{
    <script src="~/Scripts/tinymce/tinymce.min.js"></script>
    <script>
        tinymce.init({
            selector: '#Descriptions',
            language: "ru_RU",
            height: "400",
            plugins: "image imagetools code link"
        });
    </script>
}
