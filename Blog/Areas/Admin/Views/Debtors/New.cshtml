@using Bankiru.Models.Domain.Debtors
@using Bankiru.Models.Domain
@model VM_Debtor
@{    
    Layout = "~/Areas/Admin/Views/Shared/MasterAdmin.cshtml";
}
@section styles{
    @Styles.Render("~/Content/admin/debtors/css")
    @Scripts.Render("~/bundles/jqueryui");
}
<div class="back-to-list">
    @Html.ActionLink("Вернуться к списку", "List", routeValues: new {back_to_list = true})
</div>
<div id="debtor-editor">
    @using (Html.BeginForm("New", "Debtors", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
    
        <div class="stat-block">
            <h2>Контактная информация должника</h2>
            <div class="stat-block-body">                
                <div class="editor-field editor-field-debt-published">
                    @Html.EditorFor(model => model.Published) @Html.LabelFor(model => model.Published)
                    @Html.ValidationMessageFor(model => model.Published)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.RegionId)
                </div>
                <div class="editor-field editor-field-region">

                    @Html.Action("_getRegionsDropDownList", "Debtors", new
           {
               selectedId = Model.RegionId,
               firstItem = EnumFirstDropDownItem.NotSelected,
               id = "RegionId"
           })
                    @Html.ValidationMessageFor(model => model.RegionId)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Locality)
                </div>
                <div class="editor-field editor-field-locality">

                    @Html.EditorFor(model => model.Locality)
                    @Html.ValidationMessageFor(model => model.Locality)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.ContactPerson)
                </div>
                <div class="editor-field editor-field-contact-person">

                    @Html.EditorFor(model => model.ContactPerson, new { htmlAttributes = new { placeholder = "Введите телефон" } })
                    @Html.ValidationMessageFor(model => model.ContactPerson)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.ContactPhone)
                </div>
                <div class="editor-field editor-field-contact-phone">

                    @Html.EditorFor(model => model.ContactPhone)
                    @Html.ValidationMessageFor(model => model.ContactPhone)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.DopPhone)
                </div>
                <div class="editor-field editor-field-dop-phone">

                    @Html.EditorFor(model => model.DopPhone)
                    @Html.ValidationMessageFor(model => model.DopPhone)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Email)
                </div>
                <div class="editor-field editor-field-contact-email">
                    @Html.EditorFor(model => model.Email)
                    @Html.ValidationMessageFor(model => model.Email)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.DebtCreatedDate)
                </div>
                <div class="editor-field editor-field-locality">
                    <input class="text-box single-line" data-val="true" data-val-date="Поле 'Дата образования долга' должно содержать дату!" data-val-required="Поле 'Дата образования долга' не заполнено!" id="DebtCreatedDate" name="DebtCreatedDate" type="date" value="@Model.DebtCreatedDate.ToString("yyyy-MM-dd")">
                    @Html.ValidationMessageFor(model => model.DebtCreatedDate)
                </div>
            </div>
        </div>
    
        <div class="stat-block">
            <h2>Основная информация о долге</h2>
            <div class="stat-block-body">
                <div class="editor-label">
                    @Html.LabelFor(model => model.DebtorType)
                </div>
                <div class="editor-field editor-field-debtor-type">

                    @Html.Action("_getDebtorTypesDropDownList", "Debtors", new
           {
               selectedId = Model.DebtorType,
               firstItem = EnumFirstDropDownItem.NotSelected,
               id = "DebtorType"
           })
                    @Html.ValidationMessageFor(model => model.DebtorType)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.OriginalCreditorType)
                </div>
                <div class="editor-field editor-field-original-creditor">

                    @Html.Action("_getOriginalCreditorTypesDropDownList", "Debtors", new
           {
               selectedId = Model.OriginalCreditorType,
               firstItem = EnumFirstDropDownItem.NotSelected,
               id = "OriginalCreditorType"
           })
                    @Html.ValidationMessageFor(model => model.OriginalCreditorType)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.DebtSellerType)
                </div>
                <div class="editor-field editor-field-seller-type">

                    @Html.Action("_getDebtSellerTypesDropDownList", "Debtors", new
           {
               selectedId = Model.DebtSellerType,
               firstItem = EnumFirstDropDownItem.NotSelected,
               id = "DebtSellerType"
           })
                    @Html.ValidationMessageFor(model => model.DebtSellerType)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.DebtEssenceType)
                </div>
                <div class="editor-field editor-field-essence-type">

                    @Html.Action("_getDebtEssenceTypesDropDownList", "Debtors", new
           {
               selectedId = Model.DebtEssenceType,
               firstItem = EnumFirstDropDownItem.NotSelected,
               id = "DebtEssenceType"
           })
                    @Html.ValidationMessageFor(model => model.DebtEssenceType)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.CourtDecisionType)
                </div>
                <div class="editor-field editor-field-court-decision">
                    @Html.Action("_getCourtDecisionTypesDropDownList", "Debtors", new
           {
               selectedId = Model.CourtDecisionType,
               firstItem = EnumFirstDropDownItem.NotSelected,
               id = "CourtDecisionType"
           })
                    @Html.ValidationMessageFor(model => model.CourtDecisionType)
                </div>
            </div>
        </div>
    
        <div class="stat-block">
            <h2>Сумма долга и цена продажи</h2>
            <div class="stat-block-body">
                <div class="editor-label">
                    @Html.LabelFor(model => model.DebtAmount)
                </div>
                <div class="editor-field editor-field-debt-amount">

                    @Html.EditorFor(model => model.DebtAmount) руб.
                @Html.ValidationMessageFor(model => model.DebtAmount)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.SalePrice)
                </div>
                <div class="editor-field editor-field-saleprice">

                    @Html.EditorFor(model => model.SalePrice) руб.
                @Html.ValidationMessageFor(model => model.SalePrice)
                </div>
            </div>
        </div>
    
        <div class="stat-block">
            <h2>Дополнительная информация</h2>
            <div class="stat-block-body">
                <div class="editor-label">
                    @Html.LabelFor(model => model.Comment)
                </div>
                <div class="editor-field editor-field-comment">

                    @Html.EditorFor(model => model.Comment)
                    @Html.ValidationMessageFor(model => model.Comment)
                </div>
            </div>
        </div>
            
        <div class="stat-block">
            <div class="stat-block-body editor-submit">
                <div class="editor-field">
                    <input type="submit" value="Сохранить изменения" class="button-ok" />
                </div>
            </div>
        </div>
    }
</div>
